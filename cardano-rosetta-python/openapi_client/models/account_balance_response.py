# coding: utf-8

"""
    Rosetta

    Build Once. Integrate Your Blockchain Everywhere.  # noqa: E501

    The version of the OpenAPI document: 1.4.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AccountBalanceResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'block_identifier': 'BlockIdentifier',
        'balances': 'list[Amount]',
        'coins': 'list[Coin]',
        'metadata': 'object'
    }

    attribute_map = {
        'block_identifier': 'block_identifier',
        'balances': 'balances',
        'coins': 'coins',
        'metadata': 'metadata'
    }

    def __init__(self, block_identifier=None, balances=None, coins=None, metadata=None, local_vars_configuration=None):  # noqa: E501
        """AccountBalanceResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._block_identifier = None
        self._balances = None
        self._coins = None
        self._metadata = None
        self.discriminator = None

        self.block_identifier = block_identifier
        self.balances = balances
        if coins is not None:
            self.coins = coins
        if metadata is not None:
            self.metadata = metadata

    @property
    def block_identifier(self):
        """Gets the block_identifier of this AccountBalanceResponse.  # noqa: E501


        :return: The block_identifier of this AccountBalanceResponse.  # noqa: E501
        :rtype: BlockIdentifier
        """
        return self._block_identifier

    @block_identifier.setter
    def block_identifier(self, block_identifier):
        """Sets the block_identifier of this AccountBalanceResponse.


        :param block_identifier: The block_identifier of this AccountBalanceResponse.  # noqa: E501
        :type: BlockIdentifier
        """
        if self.local_vars_configuration.client_side_validation and block_identifier is None:  # noqa: E501
            raise ValueError("Invalid value for `block_identifier`, must not be `None`")  # noqa: E501

        self._block_identifier = block_identifier

    @property
    def balances(self):
        """Gets the balances of this AccountBalanceResponse.  # noqa: E501

        A single account may have a balance in multiple currencies.  # noqa: E501

        :return: The balances of this AccountBalanceResponse.  # noqa: E501
        :rtype: list[Amount]
        """
        return self._balances

    @balances.setter
    def balances(self, balances):
        """Sets the balances of this AccountBalanceResponse.

        A single account may have a balance in multiple currencies.  # noqa: E501

        :param balances: The balances of this AccountBalanceResponse.  # noqa: E501
        :type: list[Amount]
        """
        if self.local_vars_configuration.client_side_validation and balances is None:  # noqa: E501
            raise ValueError("Invalid value for `balances`, must not be `None`")  # noqa: E501

        self._balances = balances

    @property
    def coins(self):
        """Gets the coins of this AccountBalanceResponse.  # noqa: E501

        If a blockchain is UTXO-based, all unspent Coins owned by an account_identifier should be returned alongside the balance. It is highly recommended to populate this field so that users of the Rosetta API implementation don't need to maintain their own indexer to track their UTXOs.  # noqa: E501

        :return: The coins of this AccountBalanceResponse.  # noqa: E501
        :rtype: list[Coin]
        """
        return self._coins

    @coins.setter
    def coins(self, coins):
        """Sets the coins of this AccountBalanceResponse.

        If a blockchain is UTXO-based, all unspent Coins owned by an account_identifier should be returned alongside the balance. It is highly recommended to populate this field so that users of the Rosetta API implementation don't need to maintain their own indexer to track their UTXOs.  # noqa: E501

        :param coins: The coins of this AccountBalanceResponse.  # noqa: E501
        :type: list[Coin]
        """

        self._coins = coins

    @property
    def metadata(self):
        """Gets the metadata of this AccountBalanceResponse.  # noqa: E501

        Account-based blockchains that utilize a nonce or sequence number should include that number in the metadata. This number could be unique to the identifier or global across the account address.  # noqa: E501

        :return: The metadata of this AccountBalanceResponse.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this AccountBalanceResponse.

        Account-based blockchains that utilize a nonce or sequence number should include that number in the metadata. This number could be unique to the identifier or global across the account address.  # noqa: E501

        :param metadata: The metadata of this AccountBalanceResponse.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountBalanceResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountBalanceResponse):
            return True

        return self.to_dict() != other.to_dict()
