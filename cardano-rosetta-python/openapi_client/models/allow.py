# coding: utf-8

"""
    Rosetta

    Build Once. Integrate Your Blockchain Everywhere.  # noqa: E501

    The version of the OpenAPI document: 1.4.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Allow(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'operation_statuses': 'list[OperationStatus]',
        'operation_types': 'list[str]',
        'errors': 'list[Error]',
        'historical_balance_lookup': 'bool'
    }

    attribute_map = {
        'operation_statuses': 'operation_statuses',
        'operation_types': 'operation_types',
        'errors': 'errors',
        'historical_balance_lookup': 'historical_balance_lookup'
    }

    def __init__(self, operation_statuses=None, operation_types=None, errors=None, historical_balance_lookup=None, local_vars_configuration=None):  # noqa: E501
        """Allow - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._operation_statuses = None
        self._operation_types = None
        self._errors = None
        self._historical_balance_lookup = None
        self.discriminator = None

        self.operation_statuses = operation_statuses
        self.operation_types = operation_types
        self.errors = errors
        self.historical_balance_lookup = historical_balance_lookup

    @property
    def operation_statuses(self):
        """Gets the operation_statuses of this Allow.  # noqa: E501

        All Operation.Status this implementation supports. Any status that is returned during parsing that is not listed here will cause client validation to error.  # noqa: E501

        :return: The operation_statuses of this Allow.  # noqa: E501
        :rtype: list[OperationStatus]
        """
        return self._operation_statuses

    @operation_statuses.setter
    def operation_statuses(self, operation_statuses):
        """Sets the operation_statuses of this Allow.

        All Operation.Status this implementation supports. Any status that is returned during parsing that is not listed here will cause client validation to error.  # noqa: E501

        :param operation_statuses: The operation_statuses of this Allow.  # noqa: E501
        :type: list[OperationStatus]
        """
        if self.local_vars_configuration.client_side_validation and operation_statuses is None:  # noqa: E501
            raise ValueError("Invalid value for `operation_statuses`, must not be `None`")  # noqa: E501

        self._operation_statuses = operation_statuses

    @property
    def operation_types(self):
        """Gets the operation_types of this Allow.  # noqa: E501

        All Operation.Type this implementation supports. Any type that is returned during parsing that is not listed here will cause client validation to error.  # noqa: E501

        :return: The operation_types of this Allow.  # noqa: E501
        :rtype: list[str]
        """
        return self._operation_types

    @operation_types.setter
    def operation_types(self, operation_types):
        """Sets the operation_types of this Allow.

        All Operation.Type this implementation supports. Any type that is returned during parsing that is not listed here will cause client validation to error.  # noqa: E501

        :param operation_types: The operation_types of this Allow.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and operation_types is None:  # noqa: E501
            raise ValueError("Invalid value for `operation_types`, must not be `None`")  # noqa: E501

        self._operation_types = operation_types

    @property
    def errors(self):
        """Gets the errors of this Allow.  # noqa: E501

        All Errors that this implementation could return. Any error that is returned during parsing that is not listed here will cause client validation to error.  # noqa: E501

        :return: The errors of this Allow.  # noqa: E501
        :rtype: list[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this Allow.

        All Errors that this implementation could return. Any error that is returned during parsing that is not listed here will cause client validation to error.  # noqa: E501

        :param errors: The errors of this Allow.  # noqa: E501
        :type: list[Error]
        """
        if self.local_vars_configuration.client_side_validation and errors is None:  # noqa: E501
            raise ValueError("Invalid value for `errors`, must not be `None`")  # noqa: E501

        self._errors = errors

    @property
    def historical_balance_lookup(self):
        """Gets the historical_balance_lookup of this Allow.  # noqa: E501

        Any Rosetta implementation that supports querying the balance of an account at any height in the past should set this to true.  # noqa: E501

        :return: The historical_balance_lookup of this Allow.  # noqa: E501
        :rtype: bool
        """
        return self._historical_balance_lookup

    @historical_balance_lookup.setter
    def historical_balance_lookup(self, historical_balance_lookup):
        """Sets the historical_balance_lookup of this Allow.

        Any Rosetta implementation that supports querying the balance of an account at any height in the past should set this to true.  # noqa: E501

        :param historical_balance_lookup: The historical_balance_lookup of this Allow.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and historical_balance_lookup is None:  # noqa: E501
            raise ValueError("Invalid value for `historical_balance_lookup`, must not be `None`")  # noqa: E501

        self._historical_balance_lookup = historical_balance_lookup

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Allow):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Allow):
            return True

        return self.to_dict() != other.to_dict()
