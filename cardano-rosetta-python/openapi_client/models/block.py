# coding: utf-8

"""
    Rosetta

    Build Once. Integrate Your Blockchain Everywhere.  # noqa: E501

    The version of the OpenAPI document: 1.4.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Block(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'block_identifier': 'BlockIdentifier',
        'parent_block_identifier': 'BlockIdentifier',
        'timestamp': 'int',
        'transactions': 'list[Transaction]',
        'metadata': 'BlockMetadata'
    }

    attribute_map = {
        'block_identifier': 'block_identifier',
        'parent_block_identifier': 'parent_block_identifier',
        'timestamp': 'timestamp',
        'transactions': 'transactions',
        'metadata': 'metadata'
    }

    def __init__(self, block_identifier=None, parent_block_identifier=None, timestamp=None, transactions=None, metadata=None, local_vars_configuration=None):  # noqa: E501
        """Block - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._block_identifier = None
        self._parent_block_identifier = None
        self._timestamp = None
        self._transactions = None
        self._metadata = None
        self.discriminator = None

        self.block_identifier = block_identifier
        self.parent_block_identifier = parent_block_identifier
        self.timestamp = timestamp
        self.transactions = transactions
        if metadata is not None:
            self.metadata = metadata

    @property
    def block_identifier(self):
        """Gets the block_identifier of this Block.  # noqa: E501


        :return: The block_identifier of this Block.  # noqa: E501
        :rtype: BlockIdentifier
        """
        return self._block_identifier

    @block_identifier.setter
    def block_identifier(self, block_identifier):
        """Sets the block_identifier of this Block.


        :param block_identifier: The block_identifier of this Block.  # noqa: E501
        :type: BlockIdentifier
        """
        if self.local_vars_configuration.client_side_validation and block_identifier is None:  # noqa: E501
            raise ValueError("Invalid value for `block_identifier`, must not be `None`")  # noqa: E501

        self._block_identifier = block_identifier

    @property
    def parent_block_identifier(self):
        """Gets the parent_block_identifier of this Block.  # noqa: E501


        :return: The parent_block_identifier of this Block.  # noqa: E501
        :rtype: BlockIdentifier
        """
        return self._parent_block_identifier

    @parent_block_identifier.setter
    def parent_block_identifier(self, parent_block_identifier):
        """Sets the parent_block_identifier of this Block.


        :param parent_block_identifier: The parent_block_identifier of this Block.  # noqa: E501
        :type: BlockIdentifier
        """
        if self.local_vars_configuration.client_side_validation and parent_block_identifier is None:  # noqa: E501
            raise ValueError("Invalid value for `parent_block_identifier`, must not be `None`")  # noqa: E501

        self._parent_block_identifier = parent_block_identifier

    @property
    def timestamp(self):
        """Gets the timestamp of this Block.  # noqa: E501

        The timestamp of the block in milliseconds since the Unix Epoch. The timestamp is stored in milliseconds because some blockchains produce blocks more often than once a second.  # noqa: E501

        :return: The timestamp of this Block.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Block.

        The timestamp of the block in milliseconds since the Unix Epoch. The timestamp is stored in milliseconds because some blockchains produce blocks more often than once a second.  # noqa: E501

        :param timestamp: The timestamp of this Block.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and timestamp is None:  # noqa: E501
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                timestamp is not None and timestamp < 0):  # noqa: E501
            raise ValueError("Invalid value for `timestamp`, must be a value greater than or equal to `0`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def transactions(self):
        """Gets the transactions of this Block.  # noqa: E501


        :return: The transactions of this Block.  # noqa: E501
        :rtype: list[Transaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this Block.


        :param transactions: The transactions of this Block.  # noqa: E501
        :type: list[Transaction]
        """
        if self.local_vars_configuration.client_side_validation and transactions is None:  # noqa: E501
            raise ValueError("Invalid value for `transactions`, must not be `None`")  # noqa: E501

        self._transactions = transactions

    @property
    def metadata(self):
        """Gets the metadata of this Block.  # noqa: E501


        :return: The metadata of this Block.  # noqa: E501
        :rtype: BlockMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Block.


        :param metadata: The metadata of this Block.  # noqa: E501
        :type: BlockMetadata
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Block):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Block):
            return True

        return self.to_dict() != other.to_dict()
