# coding: utf-8

"""
    Rosetta

    Build Once. Integrate Your Blockchain Everywhere.  # noqa: E501

    The version of the OpenAPI document: 1.4.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BlockMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'transactions_count': 'float',
        'created_by': 'str',
        'size': 'float',
        'epoch_no': 'float',
        'slot_no': 'float'
    }

    attribute_map = {
        'transactions_count': 'transactionsCount',
        'created_by': 'createdBy',
        'size': 'size',
        'epoch_no': 'epochNo',
        'slot_no': 'slotNo'
    }

    def __init__(self, transactions_count=None, created_by=None, size=None, epoch_no=None, slot_no=None, local_vars_configuration=None):  # noqa: E501
        """BlockMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._transactions_count = None
        self._created_by = None
        self._size = None
        self._epoch_no = None
        self._slot_no = None
        self.discriminator = None

        if transactions_count is not None:
            self.transactions_count = transactions_count
        if created_by is not None:
            self.created_by = created_by
        if size is not None:
            self.size = size
        if epoch_no is not None:
            self.epoch_no = epoch_no
        if slot_no is not None:
            self.slot_no = slot_no

    @property
    def transactions_count(self):
        """Gets the transactions_count of this BlockMetadata.  # noqa: E501


        :return: The transactions_count of this BlockMetadata.  # noqa: E501
        :rtype: float
        """
        return self._transactions_count

    @transactions_count.setter
    def transactions_count(self, transactions_count):
        """Sets the transactions_count of this BlockMetadata.


        :param transactions_count: The transactions_count of this BlockMetadata.  # noqa: E501
        :type: float
        """

        self._transactions_count = transactions_count

    @property
    def created_by(self):
        """Gets the created_by of this BlockMetadata.  # noqa: E501


        :return: The created_by of this BlockMetadata.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this BlockMetadata.


        :param created_by: The created_by of this BlockMetadata.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def size(self):
        """Gets the size of this BlockMetadata.  # noqa: E501


        :return: The size of this BlockMetadata.  # noqa: E501
        :rtype: float
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this BlockMetadata.


        :param size: The size of this BlockMetadata.  # noqa: E501
        :type: float
        """

        self._size = size

    @property
    def epoch_no(self):
        """Gets the epoch_no of this BlockMetadata.  # noqa: E501


        :return: The epoch_no of this BlockMetadata.  # noqa: E501
        :rtype: float
        """
        return self._epoch_no

    @epoch_no.setter
    def epoch_no(self, epoch_no):
        """Sets the epoch_no of this BlockMetadata.


        :param epoch_no: The epoch_no of this BlockMetadata.  # noqa: E501
        :type: float
        """

        self._epoch_no = epoch_no

    @property
    def slot_no(self):
        """Gets the slot_no of this BlockMetadata.  # noqa: E501


        :return: The slot_no of this BlockMetadata.  # noqa: E501
        :rtype: float
        """
        return self._slot_no

    @slot_no.setter
    def slot_no(self, slot_no):
        """Sets the slot_no of this BlockMetadata.


        :param slot_no: The slot_no of this BlockMetadata.  # noqa: E501
        :type: float
        """

        self._slot_no = slot_no

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlockMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BlockMetadata):
            return True

        return self.to_dict() != other.to_dict()
