# coding: utf-8

"""
    Rosetta

    Build Once. Integrate Your Blockchain Everywhere.  # noqa: E501

    The version of the OpenAPI document: 1.4.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ConstructionParseResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'operations': 'list[Operation]',
        'signers': 'list[str]',
        'account_identifier_signers': 'list[AccountIdentifier]',
        'metadata': 'object'
    }

    attribute_map = {
        'operations': 'operations',
        'signers': 'signers',
        'account_identifier_signers': 'account_identifier_signers',
        'metadata': 'metadata'
    }

    def __init__(self, operations=None, signers=None, account_identifier_signers=None, metadata=None, local_vars_configuration=None):  # noqa: E501
        """ConstructionParseResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._operations = None
        self._signers = None
        self._account_identifier_signers = None
        self._metadata = None
        self.discriminator = None

        self.operations = operations
        self.signers = signers
        if account_identifier_signers is not None:
            self.account_identifier_signers = account_identifier_signers
        if metadata is not None:
            self.metadata = metadata

    @property
    def operations(self):
        """Gets the operations of this ConstructionParseResponse.  # noqa: E501


        :return: The operations of this ConstructionParseResponse.  # noqa: E501
        :rtype: list[Operation]
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this ConstructionParseResponse.


        :param operations: The operations of this ConstructionParseResponse.  # noqa: E501
        :type: list[Operation]
        """
        if self.local_vars_configuration.client_side_validation and operations is None:  # noqa: E501
            raise ValueError("Invalid value for `operations`, must not be `None`")  # noqa: E501

        self._operations = operations

    @property
    def signers(self):
        """Gets the signers of this ConstructionParseResponse.  # noqa: E501

        [DEPRECATED by `account_identifier_signers` in `v1.4.4`] All signers (addresses) of a particular transaction. If the transaction is unsigned, it should be empty.  # noqa: E501

        :return: The signers of this ConstructionParseResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._signers

    @signers.setter
    def signers(self, signers):
        """Sets the signers of this ConstructionParseResponse.

        [DEPRECATED by `account_identifier_signers` in `v1.4.4`] All signers (addresses) of a particular transaction. If the transaction is unsigned, it should be empty.  # noqa: E501

        :param signers: The signers of this ConstructionParseResponse.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and signers is None:  # noqa: E501
            raise ValueError("Invalid value for `signers`, must not be `None`")  # noqa: E501

        self._signers = signers

    @property
    def account_identifier_signers(self):
        """Gets the account_identifier_signers of this ConstructionParseResponse.  # noqa: E501


        :return: The account_identifier_signers of this ConstructionParseResponse.  # noqa: E501
        :rtype: list[AccountIdentifier]
        """
        return self._account_identifier_signers

    @account_identifier_signers.setter
    def account_identifier_signers(self, account_identifier_signers):
        """Sets the account_identifier_signers of this ConstructionParseResponse.


        :param account_identifier_signers: The account_identifier_signers of this ConstructionParseResponse.  # noqa: E501
        :type: list[AccountIdentifier]
        """

        self._account_identifier_signers = account_identifier_signers

    @property
    def metadata(self):
        """Gets the metadata of this ConstructionParseResponse.  # noqa: E501


        :return: The metadata of this ConstructionParseResponse.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ConstructionParseResponse.


        :param metadata: The metadata of this ConstructionParseResponse.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConstructionParseResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConstructionParseResponse):
            return True

        return self.to_dict() != other.to_dict()
