# coding: utf-8

"""
    Rosetta

    Build Once. Integrate Your Blockchain Everywhere.  # noqa: E501

    The version of the OpenAPI document: 1.4.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class OperationMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'withdrawal_amount': 'Amount',
        'deposit_amount': 'Amount',
        'staking_credential': 'PublicKey',
        'pool_key_hash': 'str'
    }

    attribute_map = {
        'withdrawal_amount': 'withdrawalAmount',
        'deposit_amount': 'depositAmount',
        'staking_credential': 'staking_credential',
        'pool_key_hash': 'pool_key_hash'
    }

    def __init__(self, withdrawal_amount=None, deposit_amount=None, staking_credential=None, pool_key_hash=None, local_vars_configuration=None):  # noqa: E501
        """OperationMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._withdrawal_amount = None
        self._deposit_amount = None
        self._staking_credential = None
        self._pool_key_hash = None
        self.discriminator = None

        if withdrawal_amount is not None:
            self.withdrawal_amount = withdrawal_amount
        if deposit_amount is not None:
            self.deposit_amount = deposit_amount
        if staking_credential is not None:
            self.staking_credential = staking_credential
        if pool_key_hash is not None:
            self.pool_key_hash = pool_key_hash

    @property
    def withdrawal_amount(self):
        """Gets the withdrawal_amount of this OperationMetadata.  # noqa: E501


        :return: The withdrawal_amount of this OperationMetadata.  # noqa: E501
        :rtype: Amount
        """
        return self._withdrawal_amount

    @withdrawal_amount.setter
    def withdrawal_amount(self, withdrawal_amount):
        """Sets the withdrawal_amount of this OperationMetadata.


        :param withdrawal_amount: The withdrawal_amount of this OperationMetadata.  # noqa: E501
        :type: Amount
        """

        self._withdrawal_amount = withdrawal_amount

    @property
    def deposit_amount(self):
        """Gets the deposit_amount of this OperationMetadata.  # noqa: E501


        :return: The deposit_amount of this OperationMetadata.  # noqa: E501
        :rtype: Amount
        """
        return self._deposit_amount

    @deposit_amount.setter
    def deposit_amount(self, deposit_amount):
        """Sets the deposit_amount of this OperationMetadata.


        :param deposit_amount: The deposit_amount of this OperationMetadata.  # noqa: E501
        :type: Amount
        """

        self._deposit_amount = deposit_amount

    @property
    def staking_credential(self):
        """Gets the staking_credential of this OperationMetadata.  # noqa: E501


        :return: The staking_credential of this OperationMetadata.  # noqa: E501
        :rtype: PublicKey
        """
        return self._staking_credential

    @staking_credential.setter
    def staking_credential(self, staking_credential):
        """Sets the staking_credential of this OperationMetadata.


        :param staking_credential: The staking_credential of this OperationMetadata.  # noqa: E501
        :type: PublicKey
        """

        self._staking_credential = staking_credential

    @property
    def pool_key_hash(self):
        """Gets the pool_key_hash of this OperationMetadata.  # noqa: E501


        :return: The pool_key_hash of this OperationMetadata.  # noqa: E501
        :rtype: str
        """
        return self._pool_key_hash

    @pool_key_hash.setter
    def pool_key_hash(self, pool_key_hash):
        """Sets the pool_key_hash of this OperationMetadata.


        :param pool_key_hash: The pool_key_hash of this OperationMetadata.  # noqa: E501
        :type: str
        """

        self._pool_key_hash = pool_key_hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OperationMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OperationMetadata):
            return True

        return self.to_dict() != other.to_dict()
