# coding: utf-8

"""
    Rosetta

    Build Once. Integrate Your Blockchain Everywhere.  # noqa: E501

    The version of the OpenAPI document: 1.4.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SyncStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'current_index': 'int',
        'target_index': 'int',
        'stage': 'str'
    }

    attribute_map = {
        'current_index': 'current_index',
        'target_index': 'target_index',
        'stage': 'stage'
    }

    def __init__(self, current_index=None, target_index=None, stage=None, local_vars_configuration=None):  # noqa: E501
        """SyncStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._current_index = None
        self._target_index = None
        self._stage = None
        self.discriminator = None

        self.current_index = current_index
        if target_index is not None:
            self.target_index = target_index
        if stage is not None:
            self.stage = stage

    @property
    def current_index(self):
        """Gets the current_index of this SyncStatus.  # noqa: E501

        CurrentIndex is the index of the last synced block in the current stage.  # noqa: E501

        :return: The current_index of this SyncStatus.  # noqa: E501
        :rtype: int
        """
        return self._current_index

    @current_index.setter
    def current_index(self, current_index):
        """Sets the current_index of this SyncStatus.

        CurrentIndex is the index of the last synced block in the current stage.  # noqa: E501

        :param current_index: The current_index of this SyncStatus.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and current_index is None:  # noqa: E501
            raise ValueError("Invalid value for `current_index`, must not be `None`")  # noqa: E501

        self._current_index = current_index

    @property
    def target_index(self):
        """Gets the target_index of this SyncStatus.  # noqa: E501

        TargetIndex is the index of the block that the implementation is attempting to sync to in the current stage.  # noqa: E501

        :return: The target_index of this SyncStatus.  # noqa: E501
        :rtype: int
        """
        return self._target_index

    @target_index.setter
    def target_index(self, target_index):
        """Sets the target_index of this SyncStatus.

        TargetIndex is the index of the block that the implementation is attempting to sync to in the current stage.  # noqa: E501

        :param target_index: The target_index of this SyncStatus.  # noqa: E501
        :type: int
        """

        self._target_index = target_index

    @property
    def stage(self):
        """Gets the stage of this SyncStatus.  # noqa: E501

        Stage is the phase of the sync process.  # noqa: E501

        :return: The stage of this SyncStatus.  # noqa: E501
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this SyncStatus.

        Stage is the phase of the sync process.  # noqa: E501

        :param stage: The stage of this SyncStatus.  # noqa: E501
        :type: str
        """

        self._stage = stage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SyncStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SyncStatus):
            return True

        return self.to_dict() != other.to_dict()
