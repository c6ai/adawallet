# coding: utf-8

"""
    Rosetta

    Build Once. Integrate Your Blockchain Everywhere.  # noqa: E501

    The version of the OpenAPI document: 1.4.4
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.block import Block  # noqa: E501
from openapi_client.rest import ApiException

class TestBlock(unittest.TestCase):
    """Block unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test Block
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.block.Block()  # noqa: E501
        if include_optional :
            return Block(
                block_identifier = openapi_client.models.block_identifier.BlockIdentifier(
                    index = 1123941, 
                    hash = '0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85', ), 
                parent_block_identifier = openapi_client.models.block_identifier.BlockIdentifier(
                    index = 1123941, 
                    hash = '0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85', ), 
                timestamp = 1582833600000, 
                transactions = [
                    openapi_client.models.transaction.Transaction(
                        transaction_identifier = openapi_client.models.transaction_identifier.TransactionIdentifier(
                            hash = '0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f', ), 
                        operations = [
                            openapi_client.models.operation.Operation(
                                operation_identifier = openapi_client.models.operation_identifier.OperationIdentifier(
                                    index = 5, 
                                    network_index = 0, ), 
                                related_operations = [{"index":1},{"index":2}], 
                                type = 'Transfer', 
                                status = 'Reverted', 
                                account = openapi_client.models.account_identifier.AccountIdentifier(
                                    address = '0x3a065000ab4183c6bf581dc1e55a605455fc6d61', 
                                    sub_account = openapi_client.models.sub_account_identifier.SubAccountIdentifier(
                                        address = '0x6b175474e89094c44da98b954eedeac495271d0f', 
                                        metadata = openapi_client.models.metadata.metadata(), ), 
                                    metadata = openapi_client.models.metadata.metadata(), ), 
                                amount = openapi_client.models.amount.Amount(
                                    value = '1238089899992', 
                                    currency = openapi_client.models.currency.Currency(
                                        symbol = 'BTC', 
                                        decimals = 8, 
                                        metadata = {"Issuer":"Satoshi"}, ), 
                                    metadata = openapi_client.models.metadata.metadata(), ), 
                                coin_change = openapi_client.models.coin_change.CoinChange(
                                    coin_identifier = openapi_client.models.coin_identifier.CoinIdentifier(
                                        identifier = '0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1', ), 
                                    coin_action = 'coin_created', ), 
                                metadata = openapi_client.models.operation_metadata.OperationMetadata(
                                    withdrawal_amount = openapi_client.models.amount.Amount(
                                        value = '1238089899992', 
                                        currency = openapi_client.models.currency.Currency(
                                            symbol = 'BTC', 
                                            decimals = 8, ), ), 
                                    deposit_amount = openapi_client.models.amount.Amount(
                                        value = '1238089899992', 
                                        currency = openapi_client.models.currency.Currency(
                                            symbol = 'BTC', 
                                            decimals = 8, ), ), 
                                    staking_credential = openapi_client.models.public_key.PublicKey(
                                        hex_bytes = '0', 
                                        curve_type = 'secp256k1', ), 
                                    pool_key_hash = '0', ), )
                            ], 
                        metadata = {"size":12378,"lockTime":1582272577}, )
                    ], 
                metadata = {"transactions_root":"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","difficulty":"123891724987128947"}
            )
        else :
            return Block(
                block_identifier = openapi_client.models.block_identifier.BlockIdentifier(
                    index = 1123941, 
                    hash = '0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85', ),
                parent_block_identifier = openapi_client.models.block_identifier.BlockIdentifier(
                    index = 1123941, 
                    hash = '0x1f2cc6c5027d2f201a5453ad1119574d2aed23a392654742ac3c78783c071f85', ),
                timestamp = 1582833600000,
                transactions = [
                    openapi_client.models.transaction.Transaction(
                        transaction_identifier = openapi_client.models.transaction_identifier.TransactionIdentifier(
                            hash = '0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f', ), 
                        operations = [
                            openapi_client.models.operation.Operation(
                                operation_identifier = openapi_client.models.operation_identifier.OperationIdentifier(
                                    index = 5, 
                                    network_index = 0, ), 
                                related_operations = [{"index":1},{"index":2}], 
                                type = 'Transfer', 
                                status = 'Reverted', 
                                account = openapi_client.models.account_identifier.AccountIdentifier(
                                    address = '0x3a065000ab4183c6bf581dc1e55a605455fc6d61', 
                                    sub_account = openapi_client.models.sub_account_identifier.SubAccountIdentifier(
                                        address = '0x6b175474e89094c44da98b954eedeac495271d0f', 
                                        metadata = openapi_client.models.metadata.metadata(), ), 
                                    metadata = openapi_client.models.metadata.metadata(), ), 
                                amount = openapi_client.models.amount.Amount(
                                    value = '1238089899992', 
                                    currency = openapi_client.models.currency.Currency(
                                        symbol = 'BTC', 
                                        decimals = 8, 
                                        metadata = {"Issuer":"Satoshi"}, ), 
                                    metadata = openapi_client.models.metadata.metadata(), ), 
                                coin_change = openapi_client.models.coin_change.CoinChange(
                                    coin_identifier = openapi_client.models.coin_identifier.CoinIdentifier(
                                        identifier = '0x2f23fd8cca835af21f3ac375bac601f97ead75f2e79143bdf71fe2c4be043e8f:1', ), 
                                    coin_action = 'coin_created', ), 
                                metadata = openapi_client.models.operation_metadata.OperationMetadata(
                                    withdrawal_amount = openapi_client.models.amount.Amount(
                                        value = '1238089899992', 
                                        currency = openapi_client.models.currency.Currency(
                                            symbol = 'BTC', 
                                            decimals = 8, ), ), 
                                    deposit_amount = openapi_client.models.amount.Amount(
                                        value = '1238089899992', 
                                        currency = openapi_client.models.currency.Currency(
                                            symbol = 'BTC', 
                                            decimals = 8, ), ), 
                                    staking_credential = openapi_client.models.public_key.PublicKey(
                                        hex_bytes = '0', 
                                        curve_type = 'secp256k1', ), 
                                    pool_key_hash = '0', ), )
                            ], 
                        metadata = {"size":12378,"lockTime":1582272577}, )
                    ],
        )

    def testBlock(self):
        """Test Block"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
