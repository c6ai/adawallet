# coding: utf-8

"""
    Rosetta

    Build Once. Integrate Your Blockchain Everywhere.  # noqa: E501

    The version of the OpenAPI document: 1.4.4
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import openapi_client
from openapi_client.models.construction_combine_request import ConstructionCombineRequest  # noqa: E501
from openapi_client.rest import ApiException

class TestConstructionCombineRequest(unittest.TestCase):
    """ConstructionCombineRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ConstructionCombineRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = openapi_client.models.construction_combine_request.ConstructionCombineRequest()  # noqa: E501
        if include_optional :
            return ConstructionCombineRequest(
                network_identifier = openapi_client.models.network_identifier.NetworkIdentifier(
                    blockchain = 'bitcoin', 
                    network = 'mainnet', 
                    sub_network_identifier = openapi_client.models.sub_network_identifier.SubNetworkIdentifier(
                        network = 'shard 1', 
                        metadata = {"producer":"0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5"}, ), ), 
                unsigned_transaction = '0', 
                signatures = [
                    openapi_client.models.signature.Signature(
                        signing_payload = openapi_client.models.signing_payload.SigningPayload(
                            address = '0', 
                            account_identifier = openapi_client.models.account_identifier.AccountIdentifier(
                                address = '0x3a065000ab4183c6bf581dc1e55a605455fc6d61', 
                                sub_account = openapi_client.models.sub_account_identifier.SubAccountIdentifier(
                                    address = '0x6b175474e89094c44da98b954eedeac495271d0f', 
                                    metadata = openapi_client.models.metadata.metadata(), ), 
                                metadata = openapi_client.models.metadata.metadata(), ), 
                            hex_bytes = '0', 
                            signature_type = 'ecdsa', ), 
                        public_key = openapi_client.models.public_key.PublicKey(
                            hex_bytes = '0', 
                            curve_type = 'secp256k1', ), 
                        signature_type = 'ecdsa', 
                        hex_bytes = '0', )
                    ]
            )
        else :
            return ConstructionCombineRequest(
                network_identifier = openapi_client.models.network_identifier.NetworkIdentifier(
                    blockchain = 'bitcoin', 
                    network = 'mainnet', 
                    sub_network_identifier = openapi_client.models.sub_network_identifier.SubNetworkIdentifier(
                        network = 'shard 1', 
                        metadata = {"producer":"0x52bc44d5378309ee2abf1539bf71de1b7d7be3b5"}, ), ),
                unsigned_transaction = '0',
                signatures = [
                    openapi_client.models.signature.Signature(
                        signing_payload = openapi_client.models.signing_payload.SigningPayload(
                            address = '0', 
                            account_identifier = openapi_client.models.account_identifier.AccountIdentifier(
                                address = '0x3a065000ab4183c6bf581dc1e55a605455fc6d61', 
                                sub_account = openapi_client.models.sub_account_identifier.SubAccountIdentifier(
                                    address = '0x6b175474e89094c44da98b954eedeac495271d0f', 
                                    metadata = openapi_client.models.metadata.metadata(), ), 
                                metadata = openapi_client.models.metadata.metadata(), ), 
                            hex_bytes = '0', 
                            signature_type = 'ecdsa', ), 
                        public_key = openapi_client.models.public_key.PublicKey(
                            hex_bytes = '0', 
                            curve_type = 'secp256k1', ), 
                        signature_type = 'ecdsa', 
                        hex_bytes = '0', )
                    ],
        )

    def testConstructionCombineRequest(self):
        """Test ConstructionCombineRequest"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
